! This module stores the runtime parameters.  The probin_init() routine is
! used to initialize the runtime parameters

! this version is a stub -- useful for when we only need a container for
! parameters, but not for MAESTRO use.

module probin_module

  use amrex_fort_module, only : rt => amrex_real

  implicit none

  private

  @@declarationsA@@

#ifdef AMREX_USE_CUDA
  @@cudaattributesA@@
#endif

end module probin_module


module extern_probin_module

  use amrex_fort_module, only : rt => amrex_real

  implicit none

  private

  @@declarationsB@@

#ifdef AMREX_USE_CUDA
  @@cudaattributesB@@
#endif

end module extern_probin_module


module runtime_init_module

  use amrex_error_module
  use amrex_fort_module, only : rt => amrex_real
  use probin_module
  use extern_probin_module
  use amrex_parmparse_module

  implicit none

  @@namelist@@

  private

  public :: probin

  public :: runtime_init, runtime_close, runtime_pretty_print

contains

subroutine runtime_init()

  implicit none

  integer :: status

  @@allocations@@

  @@defaults@@

  read (amrex_namelist, nml=probin, iostat=status)

  if (status .ne. 0) then
     ! some problem in the namelist
     print *, 'ERROR: problem in the namelist'
     !stop
  endif

  @@acc@@

end subroutine runtime_init

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

  subroutine runtime_close()

    use probin_module

    @@deallocations@@

  end subroutine runtime_close

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

subroutine runtime_pretty_print(name, namlen) bind(C, name="runtime_pretty_print")

  use amrex_constants_module
  use extern_probin_module
  use amrex_error_module, only: amrex_error

  implicit none

  integer :: unit, i

  integer :: namlen
  integer :: name(namlen)

  logical :: ltest

  integer, parameter :: maxlen = 256
  character (len=maxlen) :: probin

  if (namlen > maxlen) then
     call amrex_error("probin file name too long")
  endif

  do i = 1, namlen
     probin(i:i) = char(name(i))
  end do

  ! open the job info file in Fortran
  open(newunit=unit, file=probin(1:namlen), status="old", position="append")

  @@printing@@

  close(unit=unit)

end subroutine runtime_pretty_print


end module runtime_init_module
